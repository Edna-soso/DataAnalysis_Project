# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1fAm8VEY3ExqRKHQsaQbEQKS5uhEQd3
"""

import pywedge as pw
import plotly.express as px
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import StandardScaler


def RScore(x,p,d):
    if x <= d[p][0.25]:
        return 4
    elif x <= d[p][0.50]:
        return 3
    elif x <= d[p][0.75]: 
        return 2
    else:
        return 1
# Arguments (x = value, p = recency, monetary_value, frequency, k = quartiles dict)
def FMScore(x,p,d):
    if x <= d[p][0.25]:
        return 1
    elif x <= d[p][0.50]:
        return 2
    elif x <= d[p][0.75]: 
        return 3
    else:
        return 4

def RFM(data):

  data['TotalCost']=data['Quantity']*data['UnitPrice']

  data['InvoiceDate']=pd.to_datetime(data['InvoiceDate'])
  Latest_date=data['InvoiceDate'].max()
  
  RFM_data = data.groupby('CustomerID').agg({'InvoiceDate' : lambda x :(Latest_date - x.max()).days,
                                        'InvoiceNo' : 'count','TotalCost' : 'sum'}).reset_index()
  RFM_data.rename(columns = {'InvoiceDate' : 'Recency',
                        'InvoiceNo' : "Frequency",
                        'TotalCost' : "Monetary"},inplace = True)

  quantiles = RFM_data.quantile(q=[0.25,0.5,0.75])

  rfm_segmentation = RFM_data
  rfm_segmentation['R_Quartile'] = rfm_segmentation['Recency'].apply(RScore, args=('Recency',quantiles,))
  rfm_segmentation['F_Quartile'] = rfm_segmentation['Frequency'].apply(FMScore, args=('Frequency',quantiles,))
  rfm_segmentation['M_Quartile'] = rfm_segmentation['Monetary'].apply(FMScore, args=('Monetary',quantiles,))

  rfm_segmentation['RFM_Score'] = rfm_segmentation.R_Quartile+ rfm_segmentation.F_Quartile + rfm_segmentation.M_Quartile
  rfm_segmentation['RFM_Group'] = rfm_segmentation.R_Quartile.map(str)  + rfm_segmentation.F_Quartile.map(str)   + rfm_segmentation.M_Quartile.map(str) 
  return rfm_segmentation

rfm_segmentation=RFM(data)

print("Best Customers: ",len(rfm_segmentation[rfm_segmentation['RFM_Group']=='444']))
print('Loyal Customers: ',len(rfm_segmentation[rfm_segmentation['F_Quartile']==4]))
print("Big Spenders: ",len(rfm_segmentation[rfm_segmentation['M_Quartile']==4]))
print('Almost Lost: ', len(rfm_segmentation[rfm_segmentation['RFM_Group']=='244']))
print('Lost Customers: ',len(rfm_segmentation[rfm_segmentation['RFM_Group']=='144']))
print('Lost Cheap Customers: ',len(rfm_segmentation[rfm_segmentation['RFM_Group']=='111']))

def K_Mean(rfm_segmentation):
  scaler = StandardScaler()
  scaler.fit(rfm_segmentation)
  #Store it separately for clustering
  rfm_normalized= scaler.transform(rfm_segmentation)

  #First : Get the Best KMeans 
  ks = range(1,19)
  inertias=[]
  for k in ks :
      # Create a KMeans clusters
      kc = KMeans(n_clusters=k,random_state=1)
      kc.fit(rfm_segmentation)
      inertias.append(kc.inertia_)

  # Plot ks vs inertias
  f, ax = plt.subplots(figsize=(15, 8))
  plt.plot(ks, inertias, '-o')
  plt.xlabel('Number of clusters, k')
  plt.ylabel('Inertia')
  plt.xticks(ks)
  plt.style.use('ggplot')
  plt.title('What is the Best Number for KMeans ?')
  plt.show()


  KM_clust = KMeans(n_clusters= 3, init = 'k-means++',max_iter = 1000)
  KM_clust.fit(rfm_normalized)

  rfm_segmentation['Cluster'] = KM_clust.labels_
  rfm_segmentation['Cluster'] = 'Cluster' + rfm_segmentation['Cluster'].astype(str)
  rfm_segmentation.head()


  fig = px.scatter(rfm_segmentation,x = 'Recency',y = 'Frequency', color = 'Cluster')
  fig.show()

  fig = px.scatter(rfm_segmentation,x = 'Monetary',y = 'Frequency', color = 'Cluster')
  fig.show()

  fig = px.scatter(rfm_segmentation,x = 'Monetary',y = 'Recency', color = 'Cluster')
  fig.show()

def visua():
  mc=pw.Pywedge_Charts(rfm_segmentation,c=None,y="Cluster")
  charts =mc.make_charts()



